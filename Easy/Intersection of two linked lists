Write a program to find the node at which the intersection of two singly linked lists begins.
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Reference of the node with value = 8
Input Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.

Solution:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA==null || headB==null){
            return null;
        }
        ListNode ptr1 = headA;
        ListNode ptr2 = headB;
        int c1 = 0;
        while(ptr1!=null){
            ptr1=ptr1.next;
            c1++;
        }
        int c2 = 0;
        while(ptr2!=null){
            ptr2=ptr2.next;
            c2++;
        }
        int offset = (c1>=c2)?c1-c2:c2-c1;
        ptr1 = headA;
        ptr2 = headB;
        if(c1>c2){
            while(offset!=0){
                ptr1=ptr1.next;
                offset--;
            }
        }else if(c2>c1){
            while(offset!=0){
                ptr2=ptr2.next;
                offset--;
            }
        }
        while(ptr1!=ptr2){
            ptr1=ptr1.next;
            ptr2=ptr2.next;
        }
        return ptr1;
    }
}
