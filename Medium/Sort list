Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5

Solution:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        ListNode walker = head;
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a,b)->a-b);
        while(walker!=null){
            pq.add(walker.val);
            walker= walker.next;            
        }
        walker = head;
        while(!pq.isEmpty()) {
        	walker.val = pq.poll();
            walker=walker.next;
        }
        return head;
    }
}
