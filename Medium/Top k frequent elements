Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]

Solution:

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        int[] res = new int[k];
        Map<Integer,Integer> hm = new HashMap<Integer,Integer>();
        for(int i:nums){
            Integer j = hm.get(i);
            hm.put(i,(j==null)?1:j+1);
        }
        PriorityQueue<Map.Entry<Integer,Integer>> pq = new PriorityQueue<Map.Entry<Integer,Integer>>((a,b)->a.getValue()==b.getValue()?a.getKey()-b.getKey():a.getValue()-b.getValue());
        for(Map.Entry<Integer,Integer> map : hm.entrySet()) {
        	pq.add(map);
        	if(pq.size()>k) {
        		pq.remove();
        	}
        }
        int i = 0;
        while(!pq.isEmpty()) {
        	res[i] = pq.poll().getKey();
            i++;
        }
		return res;
    }
}
