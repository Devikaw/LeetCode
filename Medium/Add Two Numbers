You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

Solution:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0);
        ListNode walker = head;
        int rem = 0;
        int sum = 0;
        while(l1 != null || l2 != null){
            int a = (l1 == null)? 0 : l1.val;
            int b = (l2 == null)? 0 : l2.val;
            sum = a + b + rem;
            rem = sum/10;
            sum = sum%10;
            ListNode output = new ListNode(sum);
            if(head.next == null){
                head.next = output;
                walker = head.next;
            }else{
                walker.next = output;
                walker = walker.next;
            }
            if(l1!=null){
                l1 = l1.next;
            }
            if(l2!=null){
                l2 = l2.next;
            }
        }
        if( rem > 0){
            ListNode output = new ListNode(rem);
            walker.next = output;
            walker = walker.next;
        }
        head = head.next;
        return head;
    }
}

