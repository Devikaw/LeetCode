Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

Solution:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> traversal = new ArrayList<List<Integer>>();
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root==null){
            return traversal;
        }
        return getlevelorder(root, 0);
    }
    
    private List<List<Integer>> getlevelorder(TreeNode node, int level) {
        if(level>=traversal.size()){
            traversal.add(new ArrayList<Integer>());
        }
        traversal.get(level).add(node.val);
		if(node.left!=null) getlevelorder(node.left, level+1);
		if(node.right!=null) getlevelorder(node.right, level+1);
			
		return traversal;			
	}
}
