Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

Solution:

class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<String>();
        get_paranthesis(result, "", 0, 0, n);
        return result;
    }
    
    public void get_paranthesis(List<String> result, String curr_string, int open, int close, int max){
        if(close==max){
            result.add(curr_string);
            return;
        }
        if(open<max){
            get_paranthesis(result, curr_string + "(", open+1, close, max);
        }
        if(close<open){
            get_paranthesis(result, curr_string + ")", open, close+1, max);
        }
    }
}
