Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.

Note:

The same word in the dictionary may be reused multiple times in the segmentation.
You may assume the dictionary does not contain duplicate words.
Example 1:

Input: s = "leetcode", wordDict = ["leet", "code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple", "pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
             Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
Output: false

Solution:

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        boolean[] canbreak = new boolean[s.length()+1];
        canbreak[0] = true;
        for(int i=0; i<s.length(); i++){
            if(!canbreak[i]){
                continue;
            }
            for(int j=i+1; j<=s.length(); j++){
                if(wordDict.contains(s.substring(i,j))){
                    canbreak[j] = true;
                }
            }
        }
        return canbreak[s.length()];
    }
}
