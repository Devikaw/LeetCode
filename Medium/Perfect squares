Solution 1:

Using DP
class Solution {
    public int numSquares(int n) {
        int[] squares = new int[n+1];
        Arrays.fill(squares, Integer.MAX_VALUE);
        squares[0] = 0;
        for(int i=1; i<=n; i++){
            for(int j=1; j*j<=i; j++){
                squares[i] = Math.min(squares[i-(j*j)] + 1, squares[i]);
            }
        }
        return squares[n];
    }
}

Using recurrsion:
class Solution {
    public int numSquares(int n) {
        int[] squares = new int[n+1];
        Arrays.fill(squares, 0);
        int count = find_recursion(n, squares);
        return count;
    }
	
	public int find_recursion(int n, int[] squares) {
		if(n==0) {
			return 0;
		}
		if(squares[n]!=0) {
			return squares[n];		}
		int min = Integer.MAX_VALUE;
		for(int i=1; i*i<=n; i++) {
			int count = find_recursion(n-(i*i), squares) + 1;
			min = Math.min(count, min);
		}
		return squares[n] = min;
    }
}
