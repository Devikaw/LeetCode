Given an array of linked-lists lists, each linked list is sorted in ascending order.

Merge all the linked-lists into one sort linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Solution:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0 || lists==null){
            return null;
        }
        PriorityQueue<ListNode> pq = new PriorityQueue<ListNode>((a,b)->a.val-b.val);
        ListNode head = new ListNode();
        ListNode walker = head;
        for(int i=0; i<lists.length; i++){
            if(lists[i]==null){
                continue;
            }
            walker.next = lists[i];
            walker = walker.next;
            pq.add(walker);
            while(walker.next!=null){
                walker = walker.next;
                pq.add(walker);
            }
        }
        walker = head;
        while(!pq.isEmpty()) {
        	walker.next = pq.poll();
        	walker=walker.next;
        }
        walker.next = null;
        return head.next;
    }
}
